// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workflow_execution_node.sql

package sqlcpg

import (
	"context"
	"encoding/json"
	"time"
)

type WorkflowExecutionNodeBatchInsertParams struct {
	ID                  string          `json:"id"`
	WorkflowExecutionID string          `json:"workflow_execution_id"`
	Status              string          `json:"status"`
	Node                json.RawMessage `json:"node"`
	Inputs              json.RawMessage `json:"inputs"`
	Outputs             json.RawMessage `json:"outputs"`
	Error               *string         `json:"error"`
	CreatedAt           time.Time       `json:"created_at"`
	StartedAt           *time.Time      `json:"started_at"`
	CompletedAt         *time.Time      `json:"completed_at"`
}

const workflowExecutionNodeListByWorkflowExecutionID = `-- name: WorkflowExecutionNodeListByWorkflowExecutionID :many
SELECT
	id,
	workflow_execution_id,
	status,
	node,
	inputs,
	outputs,
	error,
	created_at,
	started_at,
	completed_at
FROM workflow_execution_nodes
WHERE workflow_execution_id = $1
`

type WorkflowExecutionNodeListByWorkflowExecutionIDRow struct {
	ID                  string          `json:"id"`
	WorkflowExecutionID string          `json:"workflow_execution_id"`
	Status              string          `json:"status"`
	Node                json.RawMessage `json:"node"`
	Inputs              json.RawMessage `json:"inputs"`
	Outputs             json.RawMessage `json:"outputs"`
	Error               *string         `json:"error"`
	CreatedAt           time.Time       `json:"created_at"`
	StartedAt           *time.Time      `json:"started_at"`
	CompletedAt         *time.Time      `json:"completed_at"`
}

func (q *Queries) WorkflowExecutionNodeListByWorkflowExecutionID(ctx context.Context, db DBTX, workflowExecutionID string) ([]WorkflowExecutionNodeListByWorkflowExecutionIDRow, error) {
	rows, err := db.Query(ctx, workflowExecutionNodeListByWorkflowExecutionID, workflowExecutionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowExecutionNodeListByWorkflowExecutionIDRow{}
	for rows.Next() {
		var i WorkflowExecutionNodeListByWorkflowExecutionIDRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowExecutionID,
			&i.Status,
			&i.Node,
			&i.Inputs,
			&i.Outputs,
			&i.Error,
			&i.CreatedAt,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
