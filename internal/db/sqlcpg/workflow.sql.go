// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workflow.sql

package sqlcpg

import (
	"context"
	"encoding/json"
	"time"
)

const workflowDelete = `-- name: WorkflowDelete :exec
WITH deleted_workflow_id AS (
	DELETE FROM workflows AS w
	WHERE w.id = $1
	RETURNING w.id
),
deleted_workflow_execution_ids AS (
	DELETE FROM workflow_executions we
	USING deleted_workflow_id
	WHERE we.workflow_id = deleted_workflow_id.id
	RETURNING we.id
)
DELETE FROM step_executions se
USING deleted_workflow_execution_ids
WHERE se.workflow_execution_id = deleted_workflow_execution_ids.id
`

// Deletes a workflow.
// It also deletes all associated workflow_executions and step_executions.
func (q *Queries) WorkflowDelete(ctx context.Context, db DBTX, id string) error {
	_, err := db.Exec(ctx, workflowDelete, id)
	return err
}

const workflowGetByID = `-- name: WorkflowGetByID :one
SELECT id, name, description, is_draft, is_valid, data, created_at, updated_at FROM workflows
WHERE id = $1
`

func (q *Queries) WorkflowGetByID(ctx context.Context, db DBTX, id string) (Workflow, error) {
	row := db.QueryRow(ctx, workflowGetByID, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDraft,
		&i.IsValid,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const workflowInsert = `-- name: WorkflowInsert :exec
INSERT INTO workflows (
	id,
	name,
	description,
	is_draft,
	is_valid,
	data,
	created_at,
	updated_at
)
VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8
)
`

type WorkflowInsertParams struct {
	ID          string          `json:"id"`
	Name        string          `json:"name"`
	Description *string         `json:"description"`
	IsDraft     bool            `json:"is_draft"`
	IsValid     bool            `json:"is_valid"`
	Data        json.RawMessage `json:"data"`
	CreatedAt   time.Time       `json:"created_at"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

func (q *Queries) WorkflowInsert(ctx context.Context, db DBTX, arg WorkflowInsertParams) error {
	_, err := db.Exec(ctx, workflowInsert,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IsDraft,
		arg.IsValid,
		arg.Data,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const workflowUpdate = `-- name: WorkflowUpdate :one
UPDATE workflows
SET
	name = CASE WHEN $1::boolean THEN $2 ELSE name END,
	description = CASE WHEN $3::boolean THEN $4 ELSE description END,
	is_draft = CASE WHEN $5::boolean THEN $6 ELSE is_draft END,
	is_valid = CASE WHEN $7::boolean THEN $8 ELSE is_valid END,
	data = CASE WHEN $9::boolean THEN $10 ELSE data END,
	updated_at = NOW()
WHERE id = $11
RETURNING id, name, description, is_draft, is_valid, data, created_at, updated_at
`

type WorkflowUpdateParams struct {
	SetName        bool            `json:"set_name"`
	Name           string          `json:"name"`
	SetDescription bool            `json:"set_description"`
	Description    *string         `json:"description"`
	SetIsDraft     bool            `json:"set_is_draft"`
	IsDraft        bool            `json:"is_draft"`
	SetIsValid     bool            `json:"set_is_valid"`
	IsValid        bool            `json:"is_valid"`
	SetData        bool            `json:"set_data"`
	Data           json.RawMessage `json:"data"`
	ID             string          `json:"id"`
}

func (q *Queries) WorkflowUpdate(ctx context.Context, db DBTX, arg WorkflowUpdateParams) (Workflow, error) {
	row := db.QueryRow(ctx, workflowUpdate,
		arg.SetName,
		arg.Name,
		arg.SetDescription,
		arg.Description,
		arg.SetIsDraft,
		arg.IsDraft,
		arg.SetIsValid,
		arg.IsValid,
		arg.SetData,
		arg.Data,
		arg.ID,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDraft,
		&i.IsValid,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
