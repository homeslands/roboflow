// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: raybot.sql

package sqlcpg

import (
	"context"
	"time"
)

const raybotDelete = `-- name: RaybotDelete :exec
WITH deleted_raybot_id AS (
    DELETE FROM raybots AS r
    WHERE r.id = $1
    RETURNING r.id
)
DELETE FROM raybot_commands
WHERE raybot_id IN (SELECT id FROM deleted_raybot_id)
`

// Deletes a raybot and all associated raybot commands.
func (q *Queries) RaybotDelete(ctx context.Context, db DBTX, id string) error {
	_, err := db.Exec(ctx, raybotDelete, id)
	return err
}

const raybotGetByID = `-- name: RaybotGetByID :one
SELECT id, name, control_mode, is_online, ip_address, last_connected_at, created_at, updated_at FROM raybots
WHERE id = $1
`

func (q *Queries) RaybotGetByID(ctx context.Context, db DBTX, id string) (Raybot, error) {
	row := db.QueryRow(ctx, raybotGetByID, id)
	var i Raybot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ControlMode,
		&i.IsOnline,
		&i.IpAddress,
		&i.LastConnectedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const raybotInsert = `-- name: RaybotInsert :exec
INSERT INTO raybots (
    id,
    name,
	ip_address,
	last_connected_at,
	is_online,
	control_mode,
    created_at,
    updated_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
`

type RaybotInsertParams struct {
	ID              string     `json:"id"`
	Name            string     `json:"name"`
	IpAddress       *string    `json:"ip_address"`
	LastConnectedAt *time.Time `json:"last_connected_at"`
	IsOnline        bool       `json:"is_online"`
	ControlMode     string     `json:"control_mode"`
	CreatedAt       time.Time  `json:"created_at"`
	UpdatedAt       time.Time  `json:"updated_at"`
}

func (q *Queries) RaybotInsert(ctx context.Context, db DBTX, arg RaybotInsertParams) error {
	_, err := db.Exec(ctx, raybotInsert,
		arg.ID,
		arg.Name,
		arg.IpAddress,
		arg.LastConnectedAt,
		arg.IsOnline,
		arg.ControlMode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const raybotUpdate = `-- name: RaybotUpdate :one
UPDATE raybots
SET
	name = CASE WHEN $1::boolean THEN $2 ELSE name END,
	ip_address = CASE WHEN $3::boolean THEN $4 ELSE ip_address END,
	last_connected_at = CASE WHEN $5::boolean THEN $6 ELSE last_connected_at END,
	is_online = CASE WHEN $7::boolean THEN $8 ELSE is_online END,
	control_mode = CASE WHEN $9::boolean THEN $10 ELSE control_mode END,
	updated_at = now()
WHERE id = $11
RETURNING id, name, control_mode, is_online, ip_address, last_connected_at, created_at, updated_at
`

type RaybotUpdateParams struct {
	SetName            bool       `json:"set_name"`
	Name               string     `json:"name"`
	SetIpAddress       bool       `json:"set_ip_address"`
	IpAddress          *string    `json:"ip_address"`
	SetLastConnectedAt bool       `json:"set_last_connected_at"`
	LastConnectedAt    *time.Time `json:"last_connected_at"`
	SetIsOnline        bool       `json:"set_is_online"`
	IsOnline           bool       `json:"is_online"`
	SetControlMode     bool       `json:"set_control_mode"`
	ControlMode        string     `json:"control_mode"`
	ID                 string     `json:"id"`
}

func (q *Queries) RaybotUpdate(ctx context.Context, db DBTX, arg RaybotUpdateParams) (Raybot, error) {
	row := db.QueryRow(ctx, raybotUpdate,
		arg.SetName,
		arg.Name,
		arg.SetIpAddress,
		arg.IpAddress,
		arg.SetLastConnectedAt,
		arg.LastConnectedAt,
		arg.SetIsOnline,
		arg.IsOnline,
		arg.SetControlMode,
		arg.ControlMode,
		arg.ID,
	)
	var i Raybot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ControlMode,
		&i.IsOnline,
		&i.IpAddress,
		&i.LastConnectedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
