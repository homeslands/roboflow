// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: qr_location.sql

package sqlcpg

import (
	"context"
	"encoding/json"
	"time"
)

const qRLocationDelete = `-- name: QRLocationDelete :exec
DELETE FROM qr_locations
WHERE id = $1
`

func (q *Queries) QRLocationDelete(ctx context.Context, db DBTX, id string) error {
	_, err := db.Exec(ctx, qRLocationDelete, id)
	return err
}

const qRLocationGetByID = `-- name: QRLocationGetByID :one
SELECT id, name, qr_code, metadata, created_at, updated_at FROM qr_locations
WHERE id = $1
`

func (q *Queries) QRLocationGetByID(ctx context.Context, db DBTX, id string) (QrLocation, error) {
	row := db.QueryRow(ctx, qRLocationGetByID, id)
	var i QrLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.QrCode,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const qRLocationInsert = `-- name: QRLocationInsert :exec
INSERT INTO qr_locations (
    id,
    name,
    qr_code,
	metadata,
    created_at,
    updated_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type QRLocationInsertParams struct {
	ID        string          `json:"id"`
	Name      string          `json:"name"`
	QrCode    string          `json:"qr_code"`
	Metadata  json.RawMessage `json:"metadata"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

func (q *Queries) QRLocationInsert(ctx context.Context, db DBTX, arg QRLocationInsertParams) error {
	_, err := db.Exec(ctx, qRLocationInsert,
		arg.ID,
		arg.Name,
		arg.QrCode,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const qRLocationUpdate = `-- name: QRLocationUpdate :one
UPDATE qr_locations
SET
	name = CASE WHEN $1::boolean THEN $2 ELSE name END,
    qr_code = CASE WHEN $3::boolean THEN $4 ELSE qr_code END,
	metadata = CASE WHEN $5::boolean THEN $6 ELSE metadata END,
    updated_at = NOW()
WHERE id = $7
RETURNING id, name, qr_code, metadata, created_at, updated_at
`

type QRLocationUpdateParams struct {
	SetName     bool            `json:"set_name"`
	Name        string          `json:"name"`
	SetQrCode   bool            `json:"set_qr_code"`
	QrCode      string          `json:"qr_code"`
	SetMetadata bool            `json:"set_metadata"`
	Metadata    json.RawMessage `json:"metadata"`
	ID          string          `json:"id"`
}

func (q *Queries) QRLocationUpdate(ctx context.Context, db DBTX, arg QRLocationUpdateParams) (QrLocation, error) {
	row := db.QueryRow(ctx, qRLocationUpdate,
		arg.SetName,
		arg.Name,
		arg.SetQrCode,
		arg.QrCode,
		arg.SetMetadata,
		arg.Metadata,
		arg.ID,
	)
	var i QrLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.QrCode,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
