// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: step_execution.sql

package sqlcpg

import (
	"context"
	"encoding/json"
	"time"
)

type StepExecutionBatchInsertParams struct {
	ID                  string          `json:"id"`
	WorkflowExecutionID string          `json:"workflow_execution_id"`
	Status              string          `json:"status"`
	Node                json.RawMessage `json:"node"`
	Inputs              json.RawMessage `json:"inputs"`
	Outputs             json.RawMessage `json:"outputs"`
	Error               *string         `json:"error"`
	CreatedAt           time.Time       `json:"created_at"`
	UpdatedAt           time.Time       `json:"updated_at"`
	StartedAt           *time.Time      `json:"started_at"`
	CompletedAt         *time.Time      `json:"completed_at"`
}

const stepExecutionGet = `-- name: StepExecutionGet :one
SELECT id, workflow_execution_id, status, node, inputs, outputs, error, created_at, updated_at, started_at, completed_at FROM step_executions
WHERE id = $1
`

func (q *Queries) StepExecutionGet(ctx context.Context, db DBTX, id string) (StepExecution, error) {
	row := db.QueryRow(ctx, stepExecutionGet, id)
	var i StepExecution
	err := row.Scan(
		&i.ID,
		&i.WorkflowExecutionID,
		&i.Status,
		&i.Node,
		&i.Inputs,
		&i.Outputs,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const stepExecutionListByWorkflowExecutionID = `-- name: StepExecutionListByWorkflowExecutionID :many
SELECT id, workflow_execution_id, status, node, inputs, outputs, error, created_at, updated_at, started_at, completed_at FROM step_executions
WHERE workflow_execution_id = $1
`

func (q *Queries) StepExecutionListByWorkflowExecutionID(ctx context.Context, db DBTX, workflowExecutionID string) ([]StepExecution, error) {
	rows, err := db.Query(ctx, stepExecutionListByWorkflowExecutionID, workflowExecutionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StepExecution{}
	for rows.Next() {
		var i StepExecution
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowExecutionID,
			&i.Status,
			&i.Node,
			&i.Inputs,
			&i.Outputs,
			&i.Error,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const stepExecutionUpdate = `-- name: StepExecutionUpdate :one
UPDATE step_executions
SET
	status = CASE WHEN $1::boolean THEN $2 ELSE status END,
	inputs = CASE WHEN $3::boolean THEN $4 ELSE inputs END,
	outputs = CASE WHEN $5::boolean THEN $6 ELSE outputs END,
	error = CASE WHEN $7::boolean THEN $8 ELSE error END,
	started_at = CASE WHEN $9::boolean THEN $10 ELSE started_at END,
	completed_at = CASE WHEN $11::boolean THEN $12 ELSE completed_at END,
	updated_at = NOW()
WHERE id = $13
RETURNING id, workflow_execution_id, status, node, inputs, outputs, error, created_at, updated_at, started_at, completed_at
`

type StepExecutionUpdateParams struct {
	SetStatus      bool            `json:"set_status"`
	Status         string          `json:"status"`
	SetInputs      bool            `json:"set_inputs"`
	Inputs         json.RawMessage `json:"inputs"`
	SetOutputs     bool            `json:"set_outputs"`
	Outputs        json.RawMessage `json:"outputs"`
	SetError       bool            `json:"set_error"`
	Error          *string         `json:"error"`
	SetStartedAt   bool            `json:"set_started_at"`
	StartedAt      *time.Time      `json:"started_at"`
	SetCompletedAt bool            `json:"set_completed_at"`
	CompletedAt    *time.Time      `json:"completed_at"`
	ID             string          `json:"id"`
}

func (q *Queries) StepExecutionUpdate(ctx context.Context, db DBTX, arg StepExecutionUpdateParams) (StepExecution, error) {
	row := db.QueryRow(ctx, stepExecutionUpdate,
		arg.SetStatus,
		arg.Status,
		arg.SetInputs,
		arg.Inputs,
		arg.SetOutputs,
		arg.Outputs,
		arg.SetError,
		arg.Error,
		arg.SetStartedAt,
		arg.StartedAt,
		arg.SetCompletedAt,
		arg.CompletedAt,
		arg.ID,
	)
	var i StepExecution
	err := row.Scan(
		&i.ID,
		&i.WorkflowExecutionID,
		&i.Status,
		&i.Node,
		&i.Inputs,
		&i.Outputs,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}
