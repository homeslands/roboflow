// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package sqlcpg

import (
	"context"
)

// iteratorForStepExecutionBatchInsert implements pgx.CopyFromSource.
type iteratorForStepExecutionBatchInsert struct {
	rows                 []StepExecutionBatchInsertParams
	skippedFirstNextCall bool
}

func (r *iteratorForStepExecutionBatchInsert) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForStepExecutionBatchInsert) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].WorkflowExecutionID,
		r.rows[0].Status,
		r.rows[0].Node,
		r.rows[0].Inputs,
		r.rows[0].Outputs,
		r.rows[0].Error,
		r.rows[0].CreatedAt,
		r.rows[0].UpdatedAt,
		r.rows[0].StartedAt,
		r.rows[0].CompletedAt,
	}, nil
}

func (r iteratorForStepExecutionBatchInsert) Err() error {
	return nil
}

func (q *Queries) StepExecutionBatchInsert(ctx context.Context, db DBTX, arg []StepExecutionBatchInsertParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"step_executions"}, []string{"id", "workflow_execution_id", "status", "node", "inputs", "outputs", "error", "created_at", "updated_at", "started_at", "completed_at"}, &iteratorForStepExecutionBatchInsert{rows: arg})
}
